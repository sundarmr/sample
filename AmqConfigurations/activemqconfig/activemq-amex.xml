<spring:beans
        xmlns:spring="http://www.springframework.org/schema/beans"
        xmlns:amq="http://activemq.apache.org/schema/core"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- Allows us to use system properties and fabric as variables in this configuration file -->

    <spring:bean class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
        <spring:constructor-arg>
            <spring:bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
                <spring:property name="config">
                    <spring:bean class="org.jasypt.encryption.pbe.config.SimpleStringPBEConfig">
                        <spring:property name="algorithm" value="PBEWithHmacSHA384AndAES_256"/>
                        <spring:property name="keyObtentionIterations" value="5000"/>
                        <spring:property name="password">
                            <spring:bean class="org.springframework.util.FileCopyUtils" factory-method="copyToString">
                                <spring:constructor-arg type="java.io.Reader">
                                    <spring:bean class="java.io.FileReader">
                                        <spring:constructor-arg value="/opt/rh/amq/etc/.master.password"
                                                                type="java.lang.String"/>
                                    </spring:bean>
                                </spring:constructor-arg>
                            </spring:bean>
                        </spring:property>
                    </spring:bean>
                </spring:property>
            </spring:bean>
        </spring:constructor-arg>
        <spring:property name="properties">
            <spring:bean class="io.fabric8.mq.fabric.ConfigurationProperties"/>
        </spring:property>
        <spring:property name="searchSystemEnvironment" value="true"/>
    </spring:bean>

    <spring:bean id="localhost" class="java.net.InetAddress" factory-method="getLocalHost"/>
    <spring:bean id="localhostAddress" factory-bean="localhost" factory-method="getHostAddress"/>

    <amq:broker brokerName="${broker-name}"
                dataDirectory="${data}"
                start="false"
                restartAllowed="false"
                advisorySupport="true"
                persistent="true"
                useShutdownHook="false"
                schedulerSupport="true"
                networkConnectorStartAsync="true">

        <amq:managementContext>
            <amq:managementContext useMBeanServer="true" createConnector="false"/>
        </amq:managementContext>

        <!-- Destination policies Section -->
        <amq:destinationPolicy>
            <amq:policyMap>
                <amq:policyEntries><%
                    policyValues = {
                    "smallest" => {
                    "maxPageSize" => "20",
                    "maxBrowsePageSize" => "20",
                    "expireMessagesPeriod" => "60000",
                    "cursorMemoryHighWaterMark" => "15",
                    "inactiveTimoutBeforeGC" => "90000"
                    },
                    "smaller" => {
                    "maxPageSize" => "100",
                    "maxBrowsePageSize" => "100",
                    "expireMessagesPeriod" => "45000",
                    "cursorMemoryHighWaterMark" => "25",
                    "inactiveTimoutBeforeGC" => "50000"
                    },
                    "small" => {
                    "maxPageSize" => "500",
                    "maxBrowsePageSize" => "500",
                    "expireMessagesPeriod" => "30000",
                    "cursorMemoryHighWaterMark" => "35",
                    "inactiveTimoutBeforeGC" => "35000"
                    },
                    "medium" => {
                    "maxPageSize" => "1000",
                    "maxBrowsePageSize" => "1000",
                    "expireMessagesPeriod" => "20000",
                    "cursorMemoryHighWaterMark" => "45",
                    "inactiveTimoutBeforeGC" => "30000"
                    },
                    "large" => {
                    "maxPageSize" => "2000",
                    "maxBrowsePageSize" => "2000",
                    "expireMessagesPeriod" => "15000",
                    "cursorMemoryHighWaterMark" => "55",
                    "inactiveTimoutBeforeGC" => "20000"
                    },
                    "larger" => {
                    "maxPageSize" => "3500",
                    "maxBrowsePageSize" => "3500",
                    "expireMessagesPeriod" => "10000",
                    "cursorMemoryHighWaterMark" => "65",
                    "inactiveTimoutBeforeGC" => "10000"
                    },
                    "largest" => {
                    "maxPageSize" => "5000",
                    "maxBrowsePageSize" => "5000",
                    "expireMessagesPeriod" => "2000",
                    "cursorMemoryHighWaterMark" => "75",
                    "inactiveTimoutBeforeGC" => "3000"
                    }
                    }

                    [ "Queue", "Topic" ].each do |destinationType|
                    [ "Smallest", "Smaller", "Small", "Medium", "Large", "Larger", "Largest" ].each do |destinationSize|
                    %>
                    <amq:policyEntry
                    <%= destinationType.downcase -%>="<%= @aim_id -%>.<%= destinationType.downcase -%>.>.<%=destinationSize.downcase -%>"
                    producerFlowControl="true"
                    useCache="true"
                    maxPageSize="<%= policyValues[ destinationSize.downcase ][ 'maxPageSize' ]-%>"
                    maxBrowsePageSize="<%= policyValues[ destinationSize.downcase ][ 'maxBrowsePageSize' ]-%>"
                    prioritizedMessages="true"
                    enableAudit="true"
                    advisoryForConsumed="false"
                    advisoryForDelivery="false"
                    advisoryForDiscardingMessages="false"
                    sendAdvisoryIfNoConsumers="false"
                    advisoryForSlowConsumers="false"
                    advisoryForFastProducers="false"
                    advisoryWhenFull="false"
                    cursorMemoryHighWaterMark="<%= policyValues[ destinationSize.downcase ][ 'cursorMemoryHighWaterMark' ] -%>"
                    inactiveTimoutBeforeGC="<%= policyValues[ destinationSize.downcase ][ 'inactiveTimoutBeforeGC' ] -%>"
                    gcInactiveDestinations="false"
                    usePrefetchExtension="true"
                    expireMessagesPeriod="<%= policyValues[ destinationSize.downcase ][ 'expireMessagesPeriod' ] -%>"<%
                    if destinationType.downcase == "queue"
                    %>
                    useConsumerPriority="true"
                    strictOrderDispatch="false"
                    lazyDispatch="true"
                    consumersBeforeDispatchStarts="0"
                    timeBeforeDispatchStarts="0"
                    persistJMSRedelivered="false"<%
                    end
                    %>>
                        <amq:pendingMessageLimitStrategy>
                            <amq:constantPendingMessageLimitStrategy limit="-1"/>
                        </amq:pendingMessageLimitStrategy>

                        <amq:pendingQueuePolicy>
                            <amq:fileQueueCursor/>
                        </amq:pendingQueuePolicy>
                    </amq:policyEntry><%
                    end
                    end
                   %>
                </amq:policyEntries>
            </amq:policyMap>
        </amq:destinationPolicy>

        <!-- Persistence Sections-->
        <amq:persistenceAdapter>
            <amq:mKahaDB directory="${data}/kahadb">
                <amq:filteredPersistenceAdapters>
                    <!-- The idea here is to examine if we want to have different storage -->
                    <!-- 	directories for queues based on naming pattern like big,medium,small -->
                    <%
                    [ "Queue", "Topic" ].each do |destinationType|
                    [ "Smallest", "Smaller", "Small", "Medium", "Large", "Larger", "Largest" ].each do |destinationSize|
                    %>
                    <amq:filteredKahaDB <%= destinationType.downcase -%>="<%= @aim_id -%>.<%= destinationType.downcase -%>.>.<%= destinationSize.downcase -%>">
                        <amq:persistenceAdapter>
                            <amq:kahaDB
                                    enableJournalDiskSyncs="true"
                                    directory="${data}/kahadb/<%= destinationType.downcase -%>/<%= destinationSize.downcase -%>"
                                    preallocationStrategy="zeros"/>
                        </amq:persistenceAdapter>
                    </amq:filteredKahaDB><%
                    end
                    end
                    %>
                </amq:filteredPersistenceAdapters>
            </amq:mKahaDB>
        </amq:persistenceAdapter>

        <amq:sslContext>
            <amq:sslContext
                    keyStore="${karaf.etc}/keystore.jks"
                    keyStoreType="JKS"
                    trustStore="${karaf.etc}/truststore.jks"
                    trustStoreType="JKS"
                    protocol="TLSv1.2">
                <spring:property name="trustStorePassword">
                    <spring:bean class="org.springframework.util.FileCopyUtils" factory-method="copyToString">
                        <spring:constructor-arg type="java.io.Reader">
                            <spring:bean class="java.io.FileReader">
                                <spring:constructor-arg value="${karaf.etc}/.ssl/truststore.password"
                                                        type="java.lang.String"/>
                            </spring:bean>
                        </spring:constructor-arg>
                    </spring:bean>
                </spring:property>
                <spring:property name="keyStorePassword">
                    <spring:bean class="org.springframework.util.FileCopyUtils" factory-method="copyToString">
                        <spring:constructor-arg type="java.io.Reader">
                            <spring:bean class="java.io.FileReader">
                                <spring:constructor-arg value="${karaf.etc}/.ssl/keystore.password"
                                                        type="java.lang.String"/>
                            </spring:bean>
                        </spring:constructor-arg>
                    </spring:bean>
                </spring:property>
            </amq:sslContext>
        </amq:sslContext>

        <!-- Plugins Config Section-->
        <amq:plugins>
            <amq:jaasAuthenticationPlugin configuration="karaf"/>
            <amq:authorizationPlugin>
                <amq:map>
                    <spring:bean class="com.aexp.ecp.amq.security.AmexCachedLdapAuthorizationMap">
                        <spring:property name="legacyGroupMapping" value="false"/>
                        <spring:property name="connectionURL" value="${ldap.connectionString}"/>
                        <spring:property name="connectionUsername" value="${network.username}"/>
                        <spring:property name="connectionPassword" value="${network.password}"/>
                        <spring:property name="sslProtocol" value="TLSv1.2"/>
                        <spring:property name="trustStorePath" value="${karaf.etc}/truststore.jks"/>
                        <spring:property name="keyStorePath" value="${karaf.etc}/keystore.jks"/>
                        <spring:property name="storeType" value="JKS" />
                        <spring:property name="trustStorePassword">
                          <spring:bean class="org.springframework.util.FileCopyUtils" factory-method="copyToString">
                              <spring:constructor-arg type="java.io.Reader">
                                  <spring:bean class="java.io.FileReader">
                                      <spring:constructor-arg value="${karaf.etc}/.ssl/truststore.password"
                                                              type="java.lang.String"/>
                                  </spring:bean>
                              </spring:constructor-arg>
                          </spring:bean>
                        </spring:property>
                        <spring:property name="keyStorePassword">
                        <spring:bean class="org.springframework.util.FileCopyUtils" factory-method="copyToString">
                            <spring:constructor-arg type="java.io.Reader">
                                <spring:bean class="java.io.FileReader">
                                    <spring:constructor-arg value="${karaf.etc}/.ssl/keystore.password"
                                                            type="java.lang.String"/>
                                </spring:bean>
                            </spring:constructor-arg>
                        </spring:bean>
                        </spring:property>
                        <spring:property name="queueSearchBase"
                                         value="OU=SecurityGroups,OU=Process,dc=ads,dc=aexp,dc=com"/>
                        <spring:property name="topicSearchBase"
                                         value="OU=SecurityGroups,OU=Process,dc=ads,dc=aexp,dc=com"/>
                        <spring:property name="tempSearchBase"
                                         value="OU=SecurityGroups,OU=Process,dc=ads,dc=aexp,dc=com"/>
                        <spring:property name="groupClass" value="org.apache.karaf.jaas.boot.principal.RolePrincipal"/>
                        <spring:property name="environment" value="<%= @env -%>"/>
                        <spring:property name="aimId" value="<%= @aim_id -%>"/>
                        <spring:property name="groupObjectClass" value="group"/>
                        <spring:property name="userNameAttribute" value="sAMAccountName"/><% if @env.downcase == "e1" %>
			<spring:property name="refreshInterval" value="10000" /><%
			elsif @env.downcase == "e2" %>
			<spring:property name="refreshInterval" value="60000" /><%
			else @env.downcase == "e3" %>
			<spring:property name="refreshInterval" value="3600000" /><%
                        end %>
                    </spring:bean>
                </amq:map>
            </amq:authorizationPlugin>
            <amq:destinationPathSeparatorPlugin pathSeparator="-" />
        </amq:plugins>

        <amq:systemUsage>
            <amq:systemUsage sendFailIfNoSpaceAfterTimeout="5000">
                <amq:memoryUsage>
                    <amq:memoryUsage percentOfJvmHeap="95"/>
                </amq:memoryUsage>
                <amq:storeUsage>
                    <amq:storeUsage limit="10gb"/>
                </amq:storeUsage>
                <amq:tempUsage>
                    <amq:tempUsage limit="1gb"/>
                </amq:tempUsage>
            </amq:systemUsage>
        </amq:systemUsage>

        <!-- Security Context Section -->

        <amq:transportConnectors>
            <amq:transportConnector name="frontdoor"
                                    uri="nio+ssl://#{@localhostAddress}:0?transport.enabledProtocols=${https.protocols}&amp;maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"
                                    rebalanceClusterClients="true"
                                    updateClusterClients="true"
                                    updateClusterClientsOnRemove="false"/>
            <amq:transportConnector name="backdoor"
                                    uri="nio+ssl://#{@localhostAddress}:0?transport.enabledProtocols=${https.protocols}&amp;transport.needClientAuth=true&amp;maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"
                                    rebalanceClusterClients="true"
                                    updateClusterClients="true"
                                    updateClusterClientsOnRemove="false"/>
        </amq:transportConnectors>
    </amq:broker>
</spring:beans>
